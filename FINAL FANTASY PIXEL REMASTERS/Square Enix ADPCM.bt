//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
local int i;
local int j;
typedef struct{
    char magic[4];
    byte version;
    byte reserved;
    short size;
    uint offset;
    uint reserved;
}ChunkHeader;

typedef struct{
    string Name;
    while((FTell() % 16) !=0){
        byte padding<hidden=true>;
    };
    float volume;
    float audibleRange;
    ushort number;
    float innerRange;
    uint useGranular;//a bool, but fills 4 bytes of data
    uint sampleRate;
    byte numSection;
    byte numMode;
}Music;

typedef struct{
    byte version;
    byte output;
    short size;
    byte sectCount;
    byte modeCount;
    byte category;
    byte priority;
    short number;
    byte flags;//these should be present in SEAD.cs
}MusicHeader;

typedef struct{
    local int start = FTell();
    byte version;
    byte output;
    short size;
    short entryCount;
    while((FTell()%16) != 0){
        byte padding<hidden=true>;
    };
    uint entryOffs[entryCount];//would have to find one with more than one to see what size these are
    local int entry;
    for(entry=0;entry<entryCount;entry++){
        FSeek(start+entryOffs[entry]);
        MusicHeader music;
    };
}MusicTable;

typedef struct{
    byte version;
    byte reserved;
    short size;
    byte channels;
    //in the IL2CPP dump as uint number;
    byte format;
    short mtrlIndex;//not present in the il2cpp dump
    uint sampleRate;
    uint loopStart;
    uint loopEnd;
    uint extraDataSize;
    uint streamSize;
    uint extraDataID;
}StreamHeader;

typedef struct{
    local int startOff = FTell();
    byte version;
    byte reserved;
    short size;
    short entries;
    short reserved;
    uint64 reserved;
    uint64 entryOffset[entries];
    for(j=0;j<entries;j++){
        FSeek(startOff+entryOffset[j]);
        StreamHeader stream;
    };
}Material;

typedef struct{
    ChunkHeader header;
    local int returnAdd = FTell();
    FSeek(header.offset);
    switch(header.magic){
        case "musc":
            MusicTable music;
            break;
        case "mtrl":
            Material materialStream;
            break;
        default:
            break;
    };
    FSeek(returnAdd);
}Chunk;

typedef struct{
    char magic[4];
    byte version;//0x2
    byte flags;
    short headerSize;
    byte chunkCount;
    byte filenameSize;
    short num;
    uint fileSize;
    char fileName[filenameSize];
    while((FTell() % 16) != 0){
        byte padding<hidden=true>;
    };
    for(i=0;i<chunkCount;i++){
        Chunk chunk;
    };
}Header;

Header header;