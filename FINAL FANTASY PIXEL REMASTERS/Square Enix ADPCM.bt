//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
local int i;
local int j;
typedef struct{
    byte version;
    byte reserved;
    short size;
}BaseHeader;

typedef struct{
    local int start = FTell();
    BaseHeader header;
    short entryCount;
    while((FTell()%16) != 0){
        byte padding<hidden=true>;
    };
    uint entryOffs[entryCount];//would have to find one with more than one to see what size these are
}EntryTable;

typedef struct{
    char magic[4];
    BaseHeader header;
    uint offset;
    uint reserved;
}ChunkHeader;

typedef struct{
    BaseHeader header;
    ushort materialIndex;
    ushort loopCount;
    float offset;
    uint endPoint;
}Layer;

typedef struct{
    BaseHeader header;
    byte nameSize;
    byte layerCount;
    short customPointCount;
    uint entryPoints;//in samples
    uint exitPoints;
    uint loopStart;
    uint loopEnd;
    uint meterCount;
    struct Meter{
        byte data[68];
    }meters[meterCount];//this is a guess
    char Name[nameSize];
    while((FTell()%16) != 0){
        byte padding<hidden=true>;
    };
    local int sectEnd = FTell();
}Section;

typedef struct(uint muscOffset,uint sectionCount,uint tableOffset){
    //parse section, then its individual layers I believe
    local int sect, lay, currentLayer,sectOffset, offset;
    for(sect=0;sect<sectionCount;sect++){
        offset = ReadUInt(tableOffset+(sect*4)+(currentLayer*4));
        sectOffset = muscOffset+offset;
        FSeek(sectOffset);
        Section section;
        for(lay=0;lay<section[sect].layerCount;lay++){
            currentLayer++;
            offset = ReadUInt(section.sectEnd+(currentLayer*4));
            FSeek(sectOffset+offset);
            Layer layer;
        };
    };
}SectionTable;

typedef struct{
    local int muscOffset = FTell(); //needed for SectionTable
    byte version;
    byte output;
    short size;
    byte sectCount;
    byte modeCount;
    byte category;
    byte priority;
    short number;
    byte flags;//these should be present in SEAD.cs
    byte distanceAttenuationCurve;
    float interiorFactor;
    byte unkns[16];
    float audibleRange;
    float innerRange;
    float volume;
    byte sendBusses[4];
    float sendVolumes[4];
    uint counts;
    uint sampleRate;
    byte nameSize;
    byte port;
    byte numSection;
    byte numMode;
    float audioLength;
    float unknFloats[4];
    char Name[nameSize];
    while((FTell() % 16) !=0){
        byte padding<hidden=true>;
    };
    local int tableOffset = FTell();
    SectionTable sections(muscOffset,sectCount,tableOffset);
}MusicHeader;

typedef struct{
    EntryTable entryData;
    local int entry;
    for(entry=0;entry<entryData.entryCount;entry++){
        FSeek(entryData.start+entryData.entryOffs[entry]);
        MusicHeader music;
    };
}MusicTable;

typedef struct{
    BaseHeader header;
    byte channels;
    //in the IL2CPP dump as uint number;
    byte format;
    short mtrlIndex;//not present in the il2cpp dump
    uint sampleRate;
    uint loopStart;
    uint loopEnd;
    uint extraDataSize;
    uint streamSize;
    uint extraDataID;
}StreamHeader;

typedef struct{
    EntryTable entryData;
    local int entry;
    for(entry=0;entry<entryData.entryCount;entry++){
        FSeek(entryData.start+entryData.entryOffs[entry]);
        StreamHeader stream;
    };
}Material;

typedef struct{
    ChunkHeader header;
    local int returnAdd = FTell();
    FSeek(header.offset);
    switch(header.magic){
        case "musc":
            MusicTable music;
            break;
        case "mtrl":
            Material materialStream;
            break;
        default:
            break;
    };
    FSeek(returnAdd);
}Chunk;

typedef struct{
    char magic[4];
    byte version;//0x2
    byte flags;
    short headerSize;
    byte chunkCount;
    byte filenameSize;
    short num;
    uint fileSize;
    char fileName[filenameSize];
    while((FTell() % 16) != 0){
        byte padding<hidden=true>;
    };
    for(i=0;i<chunkCount;i++){
        Chunk chunk;
    };
}Header;

Header header;